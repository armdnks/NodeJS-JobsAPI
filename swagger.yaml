openapi: 3.0.0
info:
  title: Jobs API
  description: Backend API to manage jobs and authentication.
  contact: {}
  version: "1.0"
servers:
  - url: https://course-jobs-api.herokuapp.com/api/v1
    variables: {}
paths:
  /jobs:
    post:
      tags:
        - Jobs
      summary: Create Job
      description: Add new job to database. Must be authenticated user.
      operationId: CreateJob
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateJobRequest"
            example:
              company: My Company
              position: Backend Developer
        required: true
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
      security:
        - bearer: []
    get:
      tags:
        - Jobs
      summary: Get All Jobs
      description: Fetch all user's jobs from database.
      operationId: GetAllJobs
      parameters:
        - name: Content-Type
          in: header
          description: ""
          required: true
          style: simple
          schema:
            enum:
              - application/json
            type: string
            example: application/json
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
      security:
        - bearer: []
  /jobs/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: The bon ID
    get:
      tags:
        - Jobs
      summary: Get Single Job
      description: Get single job by job ID and user ID
      operationId: GetSingleJob
      parameters:
        - name: Content-Type
          in: header
          description: ""
          required: true
          style: simple
          schema:
            enum:
              - application/json
            type: string
            example: application/json
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
      security:
        - bearer: []
    patch:
      tags:
        - Jobs
      summary: Update Job
      description: Update user's job in database.
      operationId: UpdateJob
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateJobRequest"
            example:
              company: My Company
              position: Intern Backend Developer
              status: interview
        required: true
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
      security:
        - bearer: []
    delete:
      tags:
        - Jobs
      summary: Delete Job
      description: Delete user's job from database.
      operationId: DeleteJob
      parameters: []
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
      security:
        - bearer: []
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register
      description: Add new user to database with encrypted password.
      operationId: Register
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
            example:
              name: John Doe
              email: john@demo.com
              password: demodemo
        required: true
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
      security: []
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login
      description: Login user to manage job resources.
      operationId: Login
      parameters: []
      requestBody:
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
            example:
              email: john@demo.com
              password: demodemo
        required: true
      responses:
        "200":
          description: ""
          headers: {}
      deprecated: false
      security: []
components:
  schemas:
    RegisterRequest:
      title: RegisterRequest
      required:
        - name
        - email
        - password
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
      example:
        name: John Doe
        email: john@demo.com
        password: demodemo
    LoginRequest:
      title: LoginRequest
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: john@demo.com
        password: demodemo
    CreateJobRequest:
      title: CreateJobRequest
      required:
        - company
        - position
      type: object
      properties:
        company:
          type: string
        position:
          type: string
      example:
        company: My Company
        position: Backend Developer
    UpdateJobRequest:
      title: UpdateJobRequest
      required:
        - company
        - position
        - status
      type: object
      properties:
        company:
          type: string
        position:
          type: string
        status:
          type: string
      example:
        company: My Company
        position: Intern Backend Developer
        status: interview
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
security: []
tags:
  - name: Auth
    description: User authentication, such as Register and Login.
  - name: Jobs
    description: Jobs CRUD functionality.
